kafka快：
	顺序io
	零拷贝： producer(mmap) 读取数据(sendfile)
	分治： 多个分区
	Kafka速度的秘诀在于，它把所有的消息都变成一个批量的文件，并且进行合理的批量压缩，减少网络IO的损耗，通过MMAP提高I/O的速度。写入数据的时候，由于单个Partition（分区）是末尾添加的所以速度最优；读取数据的时候配合sendfile直接暴力输入。阿里的RocketMQ也是这种模式，只不过是用Java写的
	
零拷贝： https://www.jianshu.com/p/497e7640b57c
	传统io： 四次上下文切换，两次cpu内存数据读写
	mmap：
	sendfile
	splice
	java的NIO采用transferTo()，底层使用sendfile()
	NIO直接内存，mmap技术，直接在内核空间直接进行操作，MappedByteBuffer
		由于MappedByteBuffer申请的是堆外内存，因此不受Minor GC控制，只能在发生Full GC时才能被回收。而==DirectByteBuffer==改善了这一情况，它是MappedByteBuffer类的子类，同时它实现了DirectBuffer接口，维护一个Cleaner对象来完成内存回收。因此它既可以通过Full GC来回收内存，也可以调用clean()方法来进行回收
	
DMA

运行时常量池：
	1.7之前 	在Java6及之前，字符串常量池也是方法区的一部分，其中存放的是字符创的实例
					|-----------------------|
					|	方法区(非堆/永久代)		|
					|  |----------------|	|
					|  |	运行时常量池	| 	|
					|  |  |---------|  	|  	|
					|  |  |字符串常量池	| 	|  	|
					|  |  |---------|  	|  	|
					|  |----------------|  	|
					|-----------------------|
	1.7	字符串常量池移到了堆中，其中存储的是字符串对象的引用，实例仍在堆中
		|---------------------------------------------------|	|-------|
		|   |-----------------------------------------------|	|     	|
		|   |	Thread										|	|   直 	|
		|   ||------------------------------------------|   |	|   接 	|
		|   |||---------|	|-------|   |-----------|	|   |	|   内 	|
		|   ||| 程序计数器	|   |虚拟机栈	|   |  本地方法栈	|	|   |	|   存 	|
		|   |||---------|	|-------|	|-----------|	|   |	|     	|
		|	||------------------------------------------|   |	|     	|
		|   |-----------------------------------------------|	|     	| 
		|			                                        |	|     	|
		|	|-------------------|	|-------------------|	|	|     	|
        |	|	方法区（永久代）		|	|	堆				|   |	|     	|
        |	|  |------------|	|   |   |-----------|	|   |	|     	|
        |	|  |运行时常量池	|	|   |   | 字符串常量池	| 	|   |	|     	|
        |	|  |------------|	|	|   |-----------|	|   |	|     	|
        |	|-------------------|	|-------------------|   |	|     	|
        |---------------------------------------------------|	|-------|
	1.8中字符串常量池在本地内存中，但存储的仍然是字符串对象的引用。
		|-------------------------------------------------------|
		|	|-----------|	|-----------|						|
		|	|  程序计数器	|	| 本地方法栈	|                     	|
        |	|-----------|	|-----------|                    	|
		||--------------------------------------------------|	|
		||虚拟机栈                                          	|	|
		|||----------||----------||----------||----------|	|	|
		|||局部变量表	 ||  操作数栈	 ||  动态连接	 ||方法出口信息	 |  |   | 
		|||----------||----------||----------||----------|  |	|
		||--------------------------------------------------|	|
		|														|
		||--------------------------|	|---------------|		|
		||堆                			|	|	元空间		|		|
		||--------------||------|	|	||----------|	|		|
		||  年轻代		||年老代	|	|	|| 字符串常量池	| 	|		|
        ||(Eden,s0,s1)	||		|	|	||----------|	|		|
		||--------------||------|	|	|---------------|		|
        ||--------------------------|				            |
        |-------------------------------------------------------| 

