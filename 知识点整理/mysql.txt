脏读：一个事务会读进还没有被另一个事务提交的数据，所以你会看到一些最后被另一个事务回滚掉的数据。
不可重复读：一个事务读进一条记录，另一个事务更改了这条记录并提交完毕，这时候第一个事务再次读这条记录时，它已经改变了。
幻影读：一个事务用Where子句来检索一个表的数据，另一个事务插入一条新的记录，并且符合Where条件，这样，第一个事务用同一个where条件来检索数据后，就会多出一条记录。

InnoDB
	原子性： undo log
	持久性： redo log
	隔离性： 隔离级别
	
	
	行级锁
		共享锁S
			select … lock in share mode
		排他锁X
			update,delete,insert
			select …for update
	表级锁
		意向共享锁（IS）
		意向排他锁（IX）
			X		IX		S		IS
		X	冲突		冲突		冲突		冲突
		IX	冲突		兼容		冲突		兼容
		S	冲突		冲突		兼容		兼容
		IS	冲突		兼容		兼容		兼容
	页面锁
	间隙锁Next-Key
MyISAM
	表共享读锁（Table Read Lock）
	表独占写锁（Table Write Lock）
	lock table *** read;
	unlock tables;
	select自动给度过的表加读锁，UPDATE、DELETE、INSERT等）前，自动给涉及的表加写锁
	MyISAM总是一次获得SQL语句所需要的全部锁。MyISAM表不会出现死锁

type: system > const > eq_ref > ref > fulltext > ref_or_null >
		index_merge > unique_subquery > index_subquery > range > index > ALL
extra: using where；using index；using temporary;using filesort;Not exists;
	using filesort: 无法使用索引，只用使用排序算法
	using temporary: 使用临时表排序
	using index: 使用覆盖索引
	using where: 使用where条件过滤
	using join buffer: 使用连接缓存
	impossible where: where语句的结果总是false

6 查询性能优化
	6.1为什么查询会慢：网络，cpu，生成统计信息和执行计划，锁等待，底层存储引擎检索数据调用(内存操作，cpu，io)
	6.2慢查询
		1.是否向数据库请求了不需要的数据
			查询不需要的记录
			夺标关联时返回全部列
			总是取出全部列
			重复查询相同的数据
		2.是否在扫描额外的记录
			衡量查询开销： 响应时间 扫描行数 返回行数
			响应时间：服务时间（索引，执行计划，随机io，硬件条件）+排队时间（io/锁）
			扫描行数和访问类型： explain type访问类型：全表扫描，索引扫描，唯一索引查询，常数引用
				extra： using where；using index；using temporary;using filesort;Not exists;
	6.3重构查询方式
		6.3.1一个复杂查询还是多个简单查询
		6.3.2切分查询  limit，锁表的问题
		6.3.3分解关联查询 
			.缓存效率高 （应用缓存/mysql查询缓存）
			.减少锁竞争
			.数据库拆分，高性能/可扩展
			.查询本身效率提升
			.减少冗余记录查询（网路，内存）
			.哈希关联而不是MySQL的嵌套循环关联
	6.4查询执行的基础 
		查询执行路径，图
		6.4.1 采用半双工，max_allowd_packet，limit
			查询状态： sleep 等待client发请求
				query 	正在执行查询
				locked	innodb 和 myisam
				analyzing and statistics： 正在生成存储引擎统计信息，生成执行计划
				copying to tmp table[on disk]： 正在执行查询，并将结果复制到临时表，group by或文件排序或union，如果有on disk表示从内存临时表放到磁盘上
				sorting result： 
				sending data： 多种情况：可能在多个状态之间传送数据，生成结果集，向客户端返回数据
*		6.4.2查询缓存： 根据实际情况判断该不该开启缓存
		6.4.3查询优化处理： 查询的生命周期的下一步是将一个 SQL 转换成一个执行计划， MySQL 再依照这个执行计划和存储引擎进行交互。这包括多个子阶段：解析 SQL 、预处理、优化 SQL 执行计划。这个过程中任何错误（例如语法错误）都可能终止查询
			.语法解析器和预处理
			.查询优化器： 基于成本
				select ******
				show status like 'Last_query_cost'
			导致优化器选择错误的原因：
				-统计信息不准确
				-执行计划中的成本估算不等同于实际执行的成本
				-mysql的最后和我们想的最优不一样
				-不考虑其他并发
				-并不是任何时候都时基于成本的优化，有时也回基于一些固定的规则，如MATCH子句
				-不会考虑不受控的操作成本，如果自定义函数
				-可能错过最优的
			静态优化，动态优化
			可处理的优化类型：
				-重新定义关联表的顺序
				-外连变内连
				-等价变换
				-优化 count() max() min()
				-预估并转化常熟表达式
				-覆盖索引扫描
				-子查询优化
				-提前终止查询   
				-等值传播
				-列表In()的比较
			Mysql如何执行关联查询： 嵌套循环关联
			执行计划： 和其他数据库不一样不生成字节码，生成指令树，通过存储引擎完成指令树返回结果
			排序优化： 快排后归并
				两次传输排序：旧版本，
				单次传输排序：新版本，所有列的总长不超过max_length_for_sort_data时，使用这个
		6.4.4查询执行引擎
			执行计划时一个数据结构，
	6.5MySQL查询优化器的局限性
*		6.5.1关联子查询： 
			如何用好关联子查询：
			select film.film_id from sakila.film inner join sakila.film_actor using(film_id)
			select distinct film.film_id from sakila.film inner join sakila.film_actor using(film_id)
			select film_id from sakila.film where exists(select * from sakila.film_actor where film.film_id=film_actor.film_id)
		6.5.3索引合并优化
		6.5.4等值传递，in()列表过大，消耗大
		6.5.7松散索引扫描
		6.5.8最大值最小值
		6.5.9一个表中查询和更新
	6.7优化特定类型的查询
		6.7.1count：对NULL的理解
		6.7.2优化关联查询
			-确保on或using上有索引，
			-确保任何group by和order by只涉及到一个表中的列，
			-升级MySQL需要注意，关联语法、运算发优先级等可能会发生变化
		6.7.3优化子查询
			-group by和distinct
			-limit
			-sql_calc_found_rows
			-union
7mysql高级特性
	7.1分区表
		建表时 partition by
		好处：
		-数据太大，无法都放内存
		-容易维护，要删删整个分区，方便
		-不同物理设备
		-避免某些特殊瓶颈，如：innodb单个索引互斥，ext3文件系统的inode锁竞争
		-如果需要还可以备份独立分区
		7.1.1分区表的原理
			多个底层表实现，底层表也由句柄对象表示，所以可以直接访问分区。
		7.1.2分区表的类型
		7.1.3如何使用分区表
			为了保证大数据量的可用性
			-全量扫描数据，不要任何索引
			-索引数据，分离热点
		7.1.4什么情况下会出问题
			-NULL值会使分区过滤无效：  NULL进第一个分区，多了会有问题，解决办法时定义第一个分区为无用分区
			-分区列和索引列不匹配
			-选择分区的成本可能很高
			-打开并锁住底层表的代价很高
			-维护分区表的代价很高
		7.1.5查询优化
			explain partition 查看是否使用了分区
			where中带上分区列，优化器会优化使用分区。只能在列本省使用，不用使用表达式，即使时分区函数也不性
		7.1.6合并表
	7.2视图
		合并算法，临时表算法
		建议使用合并算法
		group by, distinct, union, 子查询， 任何聚合函数 都使用临时表算法
		explain select ... <view_name>;  select_type为derived表示使用临时表
		7.2.1可更新视图
			group by, distinct, union, 聚合函数,以及其他特殊情况 不能更新视图， 被更新的列必须来自同一表。另外所有临时表算法的都无法被更新
			mysql不支持在视图建触发器
		7.2.2视图对性能的影响
			控制权限，隐藏列
		7.2.3视图的限制
	7.3外键约束
		问题：
			只能外键限制取值，消耗很大，如status，除了限制没别的作用了
			外键约束使得查询需要访问额外的表，额外的开销，额外的锁
			死锁
		性能提高：
			确保两个表有一致的数据，外键在相关数据的删除和更新上，也比在应用程序中维护要高效，不过，外键维护时逐行进行的，这样的更新回避批量删除和更新要慢些
	7.4在mysql内部存储代码
		存储过程优点：
			-服务器内部执行，节省带宽和网络延迟
			-代码重用
			-简化代码维护和版本更新
			-帮助提升安全，比如更细粒度控制权限。常见例子：银行转账存储过程
			-服务器端缓存存储过程的执行计划，反复执行，降低消耗
			-服务器端部署，备份、维护在服务端完成，没什么外部依赖
			-开发和数据库开发分工明确
		缺点：
			-没有开发和调试工具
			-和应用程序比，效率差些
			-给应用程序部署带来复杂
			-在服务器内部，有安全隐患(非标准的加密功能)
			-给服务器带来额外压力
			-如果出错，可能把程序拖死
			-在MySQL实现有很多限制--执行计划缓存是连接级别的，游标的物化和临时表相同，5.5之前异常处理也非常困难
			-调试非常困难
		7.4.1存储过程和函数
		7.4.2触发器
			减少客户端和服务端通信
			-一个表的一个事件最多只能定义一个触发器
			-基于行，如果修改的数据量大，效率低
			-包含看不见的工作，让sql影响的记录翻一倍
			-出现问题难排查
			-死锁和锁等待，如果触发器失败，原sql也失败
			MyISAM不是原子的
			InnoDB是原子的，小心MVCC，如：before update 实现外键约束
		7.4.3事件
			INFORMATION_SCHEME.EVENTS
			GET_LOCK()确保只有一个在执行
		7.5游标
			MySQL的游标指向的对象是存储在临时表中而不是实际查询到的数据。打开游标的时候需要执行整个查询。用limit
			历史内存表不支持blob和text，如果游标返回的结果包含这个，会创建临时磁盘表来存他。
			不支持客户端的游标
		7.6绑定变量
			7.6.1绑定变量的优化
			7.6.2sql接口的绑定变量
			7.6.3绑定变量的限制
		7.7用户自定义函数
		7.8插件
		7.9字符集和效对
			7.9.1MySQL如何使用字符集
			7.9.2选择字符集和效对规则
			7.9.3字符集和效对规则如何影响查询
		7.10全文索引
			双B-TREE
			7.10.1自然语言的全文索引
			7.10.2布尔全文索引
			7.10.4全文索引的限制
				-文本有100个单词，需要索引100次
				-3个单词的文本和10000个单词的文本，性能差好几个数量级
				-更多碎片，可能需要做更多的optimize table操做
				还可能印象优化器
				-如果使用了match against，又有可用的全文索引，一定用全文索引，即使有更好的也不会用
				-全文索引只能用作全文搜索匹配。任何其他操作都必须在MySQL完成全文索引后进行
				-不存储索引列的实际值，也就不用覆盖索引
				-除了相关性排序，不能用做其他的排序。如果要做相关性排序以外的排序，需要使用文件排序
			7.10.5全文索引的配置和优化
				ft_min_word_len: 索引单词的最小长度
				当导入数据时最好disable keys，导完后再enable keys
		7.11分布式事务
			两种事务：
			7.11.1内部XA事务
				巨大的性能下降
				破坏了MySQL内部的批量提交，单io完成多个事务的技术，使得MySQL不得不进行多次额外fsync()，如果一个事务开启了二进制事务，二进制日志进行持久化，InnoDB事务日志两次持久化，如果有二进制日志安全的事务实现，至少三次fsync()操作。唯一避免的的方法是不安比二进制日志，并将innodb_supoort_xa=0
				这样即不安全，还会导致MySQL复制没法正常工作。复制需要二进制日志的XA事务的支持，另外如果希望数据安全，最好sync_binlog=1，这时存储引擎和二进制日志才是同步的，否则XA就没意义，因为事务提交了二进制日志却可能没有提交到磁盘。这也是为什么我们强烈建议使用带电池保护的RAID卡写缓存，这个缓存可以大大加快fsync()操作的效率
			7.11.2外部XA事务
		7.12缓存查询
8优化服务器设置
	8.1MySQL配置的工作原理
		8.1.1语法、作用域和动态性
		8.1.2设置变量的副作用	
			key_buffer_size
			table_cache_size
			thread_cache_size
			query_cache_size
			read_buffer_size
			read_rnd_buffer_size
			sort_buffer_size
	8.2不要根据比率调优   MySQL崩溃时自身输出的公式，很老了
	8.3创建MySQL配置文件
		配置大小合适的缓冲池，日志文件，innodb_file_per_table, innodb_flush_method
		缓冲池大小有一套配置规则
		8.3.1坚持MySQL服务器状态变量  show global status
	8.4配置内存使用 
		配置内存规则：1可使用内存上线.2确定每个连接MySQL需要使用多少内存，例如排序缓冲和历史表。3确定操作系统需要多少内存。4把剩下的内存全部交给MySQL的缓存，例如InnoDB的缓冲池
		8.4.1MySQL可以使用多少内存
			32位linux内核通常限制任意内存在2.5-2.7G
			系统glibc库也可能限制每次分配内存大小，若glibc支持单次最大2G，就可能无法设置innodb_buffer_pool大于2G
		8.4.2每个连接多少内存 myisam_sort_buffer_size 256M，最差的情况需要25G内存，但几乎不可能发生。使用了很多大的临时表和负责存储过程是导致消耗高内存的最可能原因
		8.4.3为操作系统留内存 
		8.4.4为缓存分配内存
			最终要的缓存：
			-Innodb缓冲池
			-Innodb日志文件和MyISAM数据的忖左系统缓存
			-MyISAM键缓存
			-查询缓存
			-无法手工配置的缓存，如：二进制日志和表定义文件的操作系统缓存
			
		8.4.5Innodb缓冲池
		8.4.6MyISAM键缓存
			MyISAM自身只缓存索引不缓存数据
			最重要的配置项key_buffer_size
		8.4.7线程缓存 thread_cache_size指定了保持在缓存中的线程数，一般不需要配置，查看Thread_created状态变量检查线程缓存是否够大
		8.4.8表缓存	table_open_cache和table_definition_cache .frm文件
			如果opened_tables状态变量在增长，可能是因为表缓存不够大，可以认为增加table_cache系统变量。
			表缓存过大的缺点是，当MyISAM表多时，关机时间较长。
			open_files_limit无法打开文件的错误
			线程和表缓存实际上用的内存并不多。
		8.4.9InnoDB数据字典
			表定义缓存，数据字典
	8.5配置MySQL的IO行为
		8.5.1InnoDB IO配置
			事务日志，会把随机IO转为顺序IO
			innodb_log_file_size, innodb_log_files_group对写性能非常重要，默认两个5M，太小
			日志文件大小影响正常数据变更开销和崩溃恢复时间。太小可能影响写入，因为需要等变更日志应用到数据文件
			数据变更会写日志到日志缓冲区。在日志满的时候、事务提交的时候、或者每一秒，InnoDB都会刷新缓冲区的内容到日志文件。如果有大事务，增加日志缓冲区可以将减少io次数。innodb_log_buffer_sieze，1-8M就够
			Innodb_os_log_wirtten查看对日志文件写出了多少数据。
			InnoDB怎样刷新日志缓冲：先使用Mutex锁住缓冲区，刷新到所需要的位置，移动剩下的条目到缓冲区的前面，当mutex释放时可能有超过一个事务已经准备好刷新其日志记录。InnoDB有一个Group Commit功能，可以在一个Io操作内提交多个事务，但在5.0中打开二进制日志功能时就用不了了
			innodb_flush_log_at_trx_commit来控制日志缓冲刷新的频繁程度，权衡性能和提交的事务持久化。可用值：0 1 2
			如果磁盘控制器或操作系统假装做了刷新，只是把数据放到了别的缓存，如果驱动器断点，肯定导致数据损坏。不仅仅是丢失事务
			
			InnoDB怎样打开和刷新日志一级数据文件
				fdatasync: fsync() fdatasync()挺复杂，InnoDB缓冲，系统缓冲，双缓冲。
				ALL_0_DIRECT
				0_DSYNC
				async_unbuffered
				unbuffered
				normal
				Nosync和littlesync
			表空间： 	实现功能： 存储索引、回滚日志、出入缓冲、双写缓冲、内部数据结构
				innodb_data_file_path	innodb_data_home_dir
				innodb页16k		.idb文件
			双写缓冲	避免页没写完导致的数据损坏
			sync_binlog		怎么刷新二进制文件到磁盘，默认0：不刷新，由操作系统决定什么时候刷新缓存到磁盘。如果比0大，指定两次刷新磁盘中间间隔多少次写操作
			sync_binlog=1，崩溃后导致二进制日志没有同步数据数据，导致复制中断，不能恢复。设为1更安全，二进制日志和事务日志两个不同的地方，磁盘寻道，很慢。
			sync_binlog=1比innodb_flush_log_at_trx_commit=1对性能损害要打很多
		8.5.5MyISAM的IO
			通常每次把索引变更刷新到磁盘，批量更快，lock tables延迟写入
			delay_key_write也可以延迟写入，取值 OFF ON ALL
			延迟键写入的缺点
				-如果服务器缓存并且块没有呗刷到磁盘索引可能会损坏
				-如果很多写被延迟了，Mysql可能需要花费更长时间去关闭表，因为必须等待缓冲刷新到磁盘。在没有事情5.0这可能引起很长的表缓存锁
				-上面提到的原因，flush tables可能需要很长时间。如果为了做逻辑卷(LVM)快照或者其他备份操作，二执行福禄寿 tables with read lock，那可能增加操作的时间
				-键缓冲中没有刷回去的藏快可能占用空间，导致从磁盘上读取的新块没有空间存放。因此，查询语句可能需要等待MyISAM释放一些键缓存的空间
		8.6配置MySQL并发
			8.6.1Innodb并发配置	innodb_comit_concurruncy控制多少个线程在同一时间提交
			8.6.2MyISAM并发配置	删除标记为删除留下空洞，concurrent_insert配置打开并发插入，可配置： 0 1 2
		8.7基于工作负载的配置
			8.7.1优化blob和text的场景
				如果查询涉及到blob有使用临时表，都会在磁盘创建临时表。效率低，两种办法，通过substring()函数把值转为varchar，或者让临时表更快一些(文件系统,tmpfs文件系统)
				如果很长的变长列，先分配768字节前缀，不够了会分配扩展存储空间剩下的部分。分配一个完整的16kb的页，像其他所有的InnoDB页面一样，每个列有自己的页面。一次只为一个列分配一个页的扩展存储空间，直到使用了超过32个页以后，就会一次性分配64个页
			8.7.2优化排序filesorts
				MySQL有两种排序算法：single-pass two-pass，查询的列和order by的列总大小超过max_length_for_sort_data字节，采用two-pass算法，或者任意列是blob或text。
				MySQL必须排序blob或text时，只会使用前缀，忽略剩下的部分。max_sort_length变量指定前缀大小
				MySQL无法查看用了那种排序方法，如果增加了max_length_for_sort_data的值，磁盘私用率上升cpu使用率下降，并且Sort_merge_passes状态变量相对于完成之前很快的上升，也许时强制让很多的排序使用了single-pass的原因
		8.8完成基本配置   	tmp_table_size和max_heap_table_size, max_connections(默认100，大部分应用都不够), thread_cache_size, table_cache_size
		8.9安全和稳定的配置	expire_logs_days, max_allowd_packet, max_connect_errors, skip_name_resolve, sql_mode, sysdate_is_now
			可控制复制行为，对防止备库出问题非常有帮助: read_only, skip_slave_start, slave_net_timeout, sync_master_info, sync_relay_log, sync_relay_log_info
		8.10高级InnoDB设置：	innodb, innodb_autoinc_lock_mode, innodb_buffer_pool_instances, innodb_io_capacity, innodb_read_io_threads, innodb_write_io_threads, innodb_strict_mode, innodb_old_blocks_time, 
	innodb最重要的两个配置: innodb_buffer_pool_siez, innodb_log_file_size
10复制
	10.1复制概述
		10.1.1复制解决的问题    数据分布    负载均衡    高可用    高可用性和故障切换    MySQL升级测试
		10.1.2符合复制  
			三步：1.主库记录 bin log 2.备库记录中继日志 relay log  3.备库读取中继日志事件
				备库IO线程
				只有一个sql线程来重放中继日志的事件
	10.2配置复制  省略
	10.3复制原理
		10.3.1基于语句的复制   简单，但是current_user、触发器、存储过程等不能复制
		10.3.2基于行的复制    
		10.3.3基于行或基于语句：哪种更优
		10.3.4复制文件      mysql-bin.index  mysql-relay-bin-index  msater.info  relay-log.info
		10.3.5发送事件到其他备库    slave_log_updates让备库变为其他主库
		10.3.6复制过滤器    binlog_do_db和binlog_ignore_db， 轻易别用，导致数据丢失
	10.4复制拓扑
		10.4.1一主多备  基本配置
		10.4.2主动-主动模式下的主-主复制   最大的问题是如何解决冲突，主键自增冲突
		10.4.3主动-被动模式下的主-主复制   其中一台主库只读。服务器配置固定，使得故障转移和故障恢复很容易，也可以在不关闭服务的情况下执行维护、优化表、升级操作系统
			相当于创建一个热备，但是可以提高性能，可以进行如：读写操作，备份，离线维护以及升级等。真正的热备份解决不了这些问题。
			然而，不可能获得比单台服务器更好的写性能
		10.4.4拥有备库的主-主结构
		10.4.5环形复制   别用
		10.4.6主库、分发主库、以及备库
			备库足够多，对主库有压力，主库需要为每个备库开一个线程执行binlog dump命令。该命令读取二进制文件的数据并将其发送给备库。每个备库都会重复这样的工作，不共享binlog dump资源
			数据量大，耗内存大，如果不在缓存，磁盘检索，增加锁竞争。
			可以使用分发主库，实际上也是一个备库，唯一目的就是提取和提供主库的二进制日志。多个备库，连接到分发主库。为避免分发主库做实际的查询，可设置表为blackhole存储引擎
			还可以进行其他目的，对二进制事件进行过滤和重写。
			blackhole会有bug，需要小心
			如何保证分发主库的每个表都是blackhole引擎，服务器的storage_engine=blackhole, skip_innodb金庸innodb，无法金庸myisam和memory
		10.4.7树形或金字塔
		10.4.8定制的复制方案
			选择性复制：访问局部性原理，
			分离功能： OLTP  LOAP
			数据归档： 备库上归档，在备库保留主库删除的文件，保证主库的delete不传递到备库就可以实现。两种方法：一，主库选择性的禁用二进制日志，二，备库使用replicate_ignore_db规则。都很危险
			备库用作全文检索： 
			只读备库： 
			模拟多主复制
			创建日志服务器
	10.5复制和容量规划
		20%写和80%读，1000次/秒查询加倍负载的例子。
		10.5.1复制只能扩展读无法扩展写
		10.5.2备库什么时候开始延迟
		10.5.3规划冗余容量
	10.6复制管理和维护
		10.6.1监控复制 show master status; show master logs; show binlog events;
		10.6.2测量容量延迟   10.6.3确定主备是否一致    10.6.4从主库重新同步备库
		10.6.5改变主库
		10.6.6在一个主-主配置中交换角色
	10.7复制的问题和解决方案
		10.7。1数据损坏或丢失的错误
			主库意外关闭： sync_binlog
			备库意外关闭： 备库读master.info
			主库上二进制日志损坏： flush logs
			备库上中继日志损坏： 
			二进制日志与innodb事务日志不同步
		10.7.2使用非事务性表   数据不一致     10.7.3混合事务性和非事务性表      10.7.4不确定语句
		10.7.5主库和备库使用不通存储引擎      10.7.6备库发生数据改变      10.7.7不唯一的事务id      10.7.8未定义的事务id      10.7.9对未复制数据的依赖性
		10.7.10丢失的临时表      10.7.11不复制所有的更新     10.7.12innodb加锁引起锁的征用      10.7.13主主复制结构中写入两台主库
		10.7.14过大的复制延迟     10.7.15来自主库过大的包    10.7.16受限制的复制带宽      10.7.17磁盘空间不足      10.7.18复制的局限性
	10.8复制有多快    试验大多数小于0.3毫秒
	10.9MySQL复制的高级特性       10.10其他复制技术